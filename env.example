# Server Configuration
PORT=3000
NODE_ENV=development

# MongoDB Configuration
# Development (Docker Compose)
MONGODB_URI=mongodb://MONGO_USER:MONGO_PASSWORD@localhost:27017/paw_scan?authSource=paw_scan
# Development (Local MongoDB)
# MONGODB_URI=mongodb://localhost:27017/paw_scan

# Test Environment (Docker Compose)
MONGODB_URI_TEST=mongodb://paw_scan_test_user:paw_scan_test_password@localhost:27018/paw_scan_test?authSource=paw_scan_test
# Test Environment (Local MongoDB)
# MONGODB_URI_TEST=mongodb://localhost:27017/paw_scan_test

# Production (Update with your production MongoDB URI)
# MONGODB_URI=mongodb://username:password@your-mongodb-host:27017/paw_scan?authSource=admin

# MongoDB Credentials (for mongo-init.js)
MONGO_USER=USER_PASSWORD
MONGO_PASSWORD=SOME_PASSWORD
MONGO_TEST_USER=paw_scan_test_user
MONGO_TEST_PASSWORD=paw_scan_test_password

# API Configuration
API_VERSION=v1
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# CORS Configuration
CORS_ORIGIN=http://localhost:3000

# Logging
LOG_LEVEL=info

# Docker Compose Configuration
# MongoDB Admin credentials (for mongo-express)
MONGO_ADMIN_USERNAME=admin
MONGO_ADMIN_PASSWORD=password123

# Node.js Version (for reference)
# This project requires Node.js 24.x or higher
# Use .nvmrc file for automatic version switching 