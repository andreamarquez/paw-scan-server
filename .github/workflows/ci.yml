name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [24.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create environment file for tests
      run: |
        cp env.example .env
        echo "NODE_ENV=test" >> .env
        echo "MONGODB_URI_TEST=mongodb://test_user:test_password@localhost:27018/paw_scan_test?authSource=paw_scan_test" >> .env
        echo "MONGO_USER=test_user" >> .env
        echo "MONGO_PASSWORD=test_password" >> .env
        echo "MONGO_TEST_USER=test_user" >> .env
        echo "MONGO_TEST_PASSWORD=test_password" >> .env
        echo "MONGO_ADMIN_USERNAME=admin" >> .env
        echo "MONGO_ADMIN_PASSWORD=admin_password" >> .env

    - name: Setup MongoDB init scripts
      run: |
        chmod +x ./scripts/check-env.sh
        ./scripts/check-env.sh

    - name: Start MongoDB with Docker Compose
      run: docker compose -f docker-compose.test.yml up -d

    - name: Wait for MongoDB to be ready
      run: |
        timeout 60 bash -c 'until docker exec paw-scan-mongodb-test mongosh --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 2; done'

    - name: Run linter
      run: npm run lint

    - name: Run unit tests
      run: npm run test:unit
      env:
        CI: true

    - name: Run integration tests
      run: npm run test:integration
      env:
        CI: true

    - name: Run test coverage
      run: npm run test:coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Clean up Docker containers
      if: always()
      run: docker compose -f docker-compose.test.yml down -v --remove-orphans

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 24
      uses: actions/setup-node@v4
      with:
        node-version: '24.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Check for known vulnerabilities
      run: npm audit --audit-level high
      continue-on-error: true 